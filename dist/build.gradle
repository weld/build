apply plugin: "java"

def File weldDir
def String releaseVersion
def String examplesDir
def String cdiArtifactsDir
def String weldArtifactsDir
def String cdiApiDocsDir
def String finalName
def String distDir
def String docDir
def String defaultReadmePreface
def console = System.console()

task setup {
    if (!project.hasProperty("weldPath"))
        weldDir = file(console.readLine("\n Path to Weld Core source directory: \n"))
    else
        weldDir = new File(weldPath)

    if(!project.hasProperty("weldVersion"))
        releaseVersion = new String(console.readLine("\n Weld Core Version (used to locate built Weld jars): \n"))
    else
        releaseVersion = weldVersion

    if (!weldDir.exists())
        throw new FileNotFoundException("Cannot find " + weldDir.absolutePath);

    if (releaseVersion.equals(""))
        throw new RuntimeException("You must specify valid Weld version.")

    println "Using " + weldDir.toString() + " as Weld Core source directory."
    println "Using " + releaseVersion + " as Weld Core version."

    finalName = "weld-".concat(releaseVersion)
    distDir = project.projectDir.absolutePath + "/" + finalName
    examplesDir = distDir.concat("/examples")
    cdiArtifactsDir = distDir.concat("/artifacts/cdi")
    weldArtifactsDir = distDir.concat("/artifacts/weld")
    docDir = distDir.concat("/doc")
    cdiApiDocsDir = docDir.concat("/apidocs/cdi")
}

// create dependencies (including javadoc and sources artifacts) according given coords and version
def dep(coords, version = null) {
    def coord = "$coords:$version"
    def result = [dependencies.create(coord)]
    result << dependencies.create("$coord:javadoc")
    result << dependencies.create("$coord:sources")
    result
}

task cleanDir(type: Delete, dependsOn: setup) {

    delete fileTree(dir: weldDir.getAbsolutePath(), includes: ["**/target/", ".project", ".classpath", ".wtpmodules"])
    delete distDir
    delete "build"
    delete finalName.concat(".zip")
    doLast {
        new File(distDir).mkdirs()
        new File(examplesDir).mkdirs()
        new File(cdiArtifactsDir).mkdirs()
        new File(weldArtifactsDir).mkdirs()
        new File(cdiApiDocsDir).mkdirs()
    }
}

task copyFiles(type: Copy, dependsOn: cleanDir) {

    from project.projectDir.absolutePath
    into distDir
    include "README.md"
    include "LICENSE.txt"
}

task copyExamples(type: Copy, dependsOn: copyFiles) {

    from fileTree(dir: weldDir.getAbsolutePath().concat("/examples"), excludes: ["**/target", "**/.settings", "**/.project"])
    into examplesDir
}

repositories {
    mavenCentral()
    maven {
        url "https://repository.jboss.org/nexus/content/groups/public/"
    }
}

dependencies {
    compile dep("org.jboss.weld:weld-core", weldVersion)
    compile dep("org.jboss.weld:weld-core-impl", weldVersion)
    compile dep("org.jboss.weld.environment:weld-environment-common", weldVersion)
    compile dep("org.jboss.weld.se:weld-se-core", weldVersion)
    if(weldVersion.startsWith("3")){
        compile dep("org.jboss.weld.se:weld-se-shaded", weldVersion)
        compile dep("org.jboss.weld.servlet:weld-servlet-shaded", weldVersion)
    }else {
        compile dep("org.jboss.weld.se:weld-se", weldVersion)
        compile dep("org.jboss.weld.servlet:weld-servlet", weldVersion)
    }
    compile dep("org.jboss.weld.servlet:weld-servlet-core", weldVersion)
    // no need for version since compile configuration is transitive by default
    // listed only because we need to download javadoc and sources artifacts too
    compile dep("javax.enterprise:cdi-api")
    compile dep("org.jboss.weld:weld-api")
    compile dep("org.jboss.weld:weld-spi")
}

// helper function which return version of transitive dependency according the given artifactId
def getVersion(artifactId) {
    def result = null
    configurations.compile.resolvedConfiguration.resolvedArtifacts.each { ResolvedArtifact art ->
        def id = art.moduleVersion.id
        if (id.name.equals(artifactId))
            result = id.version
    }
    result
}

task adjustReadme(type: Exec, dependsOn: copyExamples) {

    workingDir distDir
    commandLine "sed"
    if(!project.hasProperty("readme"))
        defaultReadmePreface = "Weld is the reference implementation of CDI ".concat(getVersion("cdi-api"))
    else
        defaultReadmePreface = readme

    args "-i", "s/{CUSTOM_TEXT}/$defaultReadmePreface/", "README.md"
}

task copyCdiArtifacts(type: Copy, dependsOn: adjustReadme) {

    from configurations.compile.findAll { dep -> dep.name.contains("cdi") }
    into cdiArtifactsDir

    def cdiVersion = getVersion("cdi-api")
    // rename jars - remove version
    rename { String fileName ->
        fileName.replace("-".concat(cdiVersion), "")
    }
}

task copyWeldArtifacts(type: Copy, dependsOn: copyCdiArtifacts) {

    from configurations.compile.findAll { dep -> dep.name.contains("weld") }
    into weldArtifactsDir

    def weldApiVersion = getVersion("weld-api")
    // rename jars - remove version
    rename { String fileName ->
        fileName.replace("-".concat(weldVersion), "").replace("-".concat(weldApiVersion), "")
    }
}

task extractCdiApiDoc(type: Copy, dependsOn: copyWeldArtifacts) {

   from zipTree(cdiArtifactsDir.concat("/cdi-api-javadoc.jar"))
   into cdiApiDocsDir
}

task buildDocs(type: Exec, dependsOn: extractCdiApiDoc) {

   workingDir weldDir.path.concat("/docs/reference")
   commandLine "mvn"
   args "clean", "jdocbook:translate", "compile"
}

task copyDocs(type: Copy, dependsOn: buildDocs){

    from weldDir.path.concat("/docs/reference/target/docbook/publish")
    into docDir
}

task zipDist(type: Zip, dependsOn: copyDocs){
    from (file(distDir)){
        into finalName
    }
    baseName finalName
    extension "zip"
    destinationDir file(project.projectDir.absolutePath)
}

defaultTasks 'zipDist'

